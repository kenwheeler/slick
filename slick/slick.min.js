/*!
 *  Version: 1.5.8
 *   Author: Ken Wheeler
 *  Website: http://kenwheeler.github.io
 *     Docs: http://kenwheeler.github.io/slick
 *     Repo: http://github.com/kenwheeler/slick
 *   Issues: http://github.com/kenwheeler/slick/issues
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Slick"] = factory();
	else
		root["Slick"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	
	/*eslint-disable max-statements, complexity, max-len, prefer-spread, no-proto */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _bind = Function.prototype.bind;
	var _slice = Array.prototype.slice;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _objectAssign = __webpack_require__(1);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _a11y = __webpack_require__(2);

	var _a11y2 = _interopRequireDefault(_a11y);

	var _actions = __webpack_require__(3);

	var _actions2 = _interopRequireDefault(_actions);

	var _animation = __webpack_require__(4);

	var _animation2 = _interopRequireDefault(_animation);

	var _arrows = __webpack_require__(5);

	var _arrows2 = _interopRequireDefault(_arrows);

	var _autoplay = __webpack_require__(6);

	var _autoplay2 = _interopRequireDefault(_autoplay);

	var _build = __webpack_require__(7);

	var _build2 = _interopRequireDefault(_build);

	var _core = __webpack_require__(8);

	var _core2 = _interopRequireDefault(_core);

	var _dots = __webpack_require__(9);

	var _dots2 = _interopRequireDefault(_dots);

	var _events = __webpack_require__(10);

	var _events2 = _interopRequireDefault(_events);

	var _fade = __webpack_require__(11);

	var _fade2 = _interopRequireDefault(_fade);

	var _filter = __webpack_require__(12);

	var _filter2 = _interopRequireDefault(_filter);

	var _getters = __webpack_require__(13);

	var _getters2 = _interopRequireDefault(_getters);

	var _lazyLoad = __webpack_require__(14);

	var _lazyLoad2 = _interopRequireDefault(_lazyLoad);

	var _responsive = __webpack_require__(15);

	var _responsive2 = _interopRequireDefault(_responsive);

	var _rows = __webpack_require__(16);

	var _rows2 = _interopRequireDefault(_rows);

	var _setters = __webpack_require__(17);

	var _setters2 = _interopRequireDefault(_setters);

	var _slides = __webpack_require__(18);

	var _slides2 = _interopRequireDefault(_slides);

	var _touch = __webpack_require__(19);

	var _touch2 = _interopRequireDefault(_touch);

	var $ = window.$ || window.jQuery;

	var instanceUid = 0;

	var Slick = function Slick(element, settings, callback) {

	  (0, _objectAssign2["default"])(this, {
	    defaults: {
	      accessibility: true,
	      adaptiveHeight: false,
	      appendArrows: $(element),
	      appendDots: $(element),
	      arrows: true,
	      asNavFor: null,
	      prevArrow: "<button type=\"button\" data-role=\"none\" class=\"slick-prev\" aria-label=\"Previous\" tabindex=\"0\" role=\"button\">Previous</button>",
	      nextArrow: "<button type=\"button\" data-role=\"none\" class=\"slick-next\" aria-label=\"Next\" tabindex=\"0\" role=\"button\">Next</button>",
	      autoplay: false,
	      autoplaySpeed: 3000,
	      centerMode: false,
	      centerPadding: "50px",
	      cssEase: "ease",
	      customPaging: function customPaging(slider, i) {
	        return "<button type=\"button\" data-role=\"none\" role=\"button\" aria-required=\"false\" tabindex=\"0\">" + (i + 1) + "</button>";
	      },
	      dots: false,
	      dotsClass: "slick-dots",
	      draggable: true,
	      easing: "linear",
	      edgeFriction: 0.35,
	      fade: false,
	      focusOnSelect: false,
	      infinite: true,
	      initialSlide: 0,
	      lazyLoad: "ondemand",
	      mobileFirst: false,
	      pauseOnHover: true,
	      pauseOnDotsHover: false,
	      respondTo: "window",
	      responsive: null,
	      rows: 1,
	      rtl: false,
	      slide: "",
	      slidesPerRow: 1,
	      slidesToShow: 1,
	      slidesToScroll: 1,
	      speed: 500,
	      swipe: true,
	      swipeToSlide: false,
	      touchMove: true,
	      touchThreshold: 5,
	      useCSS: true,
	      useTransform: false,
	      variableWidth: false,
	      vertical: false,
	      verticalSwiping: false,
	      waitForAnimate: true,
	      zIndex: 1000
	    }
	  });

	  this.initials = (0, _objectAssign2["default"])(this, {
	    animating: false,
	    dragging: false,
	    autoPlayTimer: null,
	    currentDirection: 0,
	    currentLeft: null,
	    currentSlide: 0,
	    direction: 1,
	    $dots: null,
	    listWidth: null,
	    listHeight: null,
	    loadIndex: 0,
	    $nextArrow: null,
	    $prevArrow: null,
	    slideCount: null,
	    slideWidth: null,
	    $slideTrack: null,
	    $slides: null,
	    sliding: false,
	    slideOffset: 0,
	    swipeLeft: null,
	    $list: null,
	    touchObject: {},
	    transformsEnabled: false,
	    unslicked: false
	  });

	  (0, _objectAssign2["default"])(this.__proto__, _a11y2["default"], _actions2["default"], _animation2["default"], _arrows2["default"], _autoplay2["default"], _build2["default"], _core2["default"], _dots2["default"], _events2["default"], _fade2["default"], _filter2["default"], _getters2["default"], _lazyLoad2["default"], _responsive2["default"], _rows2["default"], _setters2["default"], _slides2["default"], _touch2["default"]);

	  this.activeBreakpoint = null;
	  this.animType = null;
	  this.animProp = null;
	  this.breakpoints = [];
	  this.breakpointSettings = [];
	  this.callback = callback || null;
	  this.cssTransitions = false;
	  this.hidden = "hidden";
	  this.paused = false;
	  this.positionProp = null;
	  this.respondTo = null;
	  this.rowCount = 1;
	  this.shouldClick = true;
	  this.$slider = $(element);
	  this.$slidesCache = null;
	  this.transformType = null;
	  this.transitionType = null;
	  this.visibilityChange = "visibilitychange";
	  this.windowWidth = 0;
	  this.windowTimer = null;

	  var dataSettings = $(element).data("slick") || {};

	  this.options = (0, _objectAssign2["default"])({}, this.defaults, dataSettings, settings);

	  this.currentSlide = this.options.initialSlide;

	  this.originalSettings = this.options;

	  if (typeof document.mozHidden !== "undefined") {
	    this.visibilityChange = "mozvisibilitychange";
	  } else if (typeof document.webkitHidden !== "undefined") {
	    this.visibilityChange = "webkitvisibilitychange";
	  }

	  this.autoPlay = $.proxy(this.autoPlay, this);
	  this.autoPlayClear = $.proxy(this.autoPlayClear, this);
	  this.changeSlide = $.proxy(this.changeSlide, this);
	  this.clickHandler = $.proxy(this.clickHandler, this);
	  this.selectHandler = $.proxy(this.selectHandler, this);
	  this.setPosition = $.proxy(this.setPosition, this);
	  this.swipeHandler = $.proxy(this.swipeHandler, this);
	  this.dragHandler = $.proxy(this.dragHandler, this);
	  this.keyHandler = $.proxy(this.keyHandler, this);
	  this.autoPlayIterator = $.proxy(this.autoPlayIterator, this);

	  this.instanceUid = instanceUid++;

	  // A simple way to check for HTML strings
	  // Strict HTML recognition (must start with <)
	  // Extracted from jQuery v1.11 source
	  this.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;

	  this.registerBreakpoints();
	  this.init(true);
	  this.checkResponsive(true);
	};

	$.fn.slick = function () {
	  var opt = arguments[0];
	  var args = Array.prototype.slice.call(arguments, 1);
	  var l = this.length;
	  var i = 0;
	  var ret = null;
	  for (i = 0; i < l; i++) {
	    if (typeof opt === "object" || typeof opt === "undefined") {
	      this[i].slick = new (_bind.apply(Slick, [null].concat([this[i]], _slice.call(arguments))))();
	    } else {
	      ret = this[i].slick[opt].apply(this[i].slick, args);
	      if (typeof ret !== "undefined") {
	        return ret;
	      }
	    }
	  }
	  return this;
	};

	exports["default"] = Slick;
	module.exports = exports["default"];

/***/ },
/* 1 */
/***/ function(module, exports) {

	/* eslint-disable no-unused-vars */
	'use strict';
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  activateADA: function activateADA() {
	    this.$slideTrack.find(".slick-active").attr({
	      "aria-hidden": "false"
	    }).find("a, input, button, select").attr({
	      "tabindex": "0"
	    });
	  },
	  initADA: function initADA() {
	    var _this = this;

	    this.$slides.add(this.$slideTrack.find(".slick-cloned")).attr({
	      "aria-hidden": "true",
	      "tabindex": "-1"
	    }).find("a, input, button, select").attr({
	      "tabindex": "-1"
	    });

	    this.$slideTrack.attr("role", "listbox");

	    this.$slides.not(this.$slideTrack.find(".slick-cloned")).each(function (i, slide) {
	      $(slide).attr({
	        "role": "option",
	        "aria-describedby": "slick-slide" + _this.instanceUid + i
	      });
	    });

	    if (this.$dots !== null) {
	      this.$dots.attr("role", "tablist").find("li").each(function (i, slide) {
	        $(slide).attr({
	          "role": "presentation",
	          "aria-selected": "false",
	          "aria-controls": "navigation" + _this.instanceUid + i,
	          "id": "slick-slide" + _this.instanceUid + i
	        });
	      }).first().attr("aria-selected", "true").end().find("button").attr("role", "button").end();
	    }
	    this.activateADA();
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  goTo: function goTo(slide, dontAnimate) {
	    this.changeSlide({
	      data: {
	        message: "index",
	        index: slide
	      }
	    }, dontAnimate);
	  },
	  next: function next() {
	    this.changeSlide({
	      data: {
	        message: "next"
	      }
	    });
	  },
	  pause: function pause() {
	    this.autoPlayClear();
	    this.paused = true;
	  },
	  play: function play() {
	    this.paused = false;
	    this.autoPlay();
	  },
	  prev: function prev() {
	    this.changeSlide({
	      data: {
	        message: "previous"
	      }
	    });
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 4 */
/***/ function(module, exports) {

	
	/*eslint-disable max-statements, complexity */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  animateHeight: function animateHeight() {
	    if (this.options.slidesToShow === 1 && this.options.adaptiveHeight === true && this.options.vertical === false) {
	      var targetHeight = this.$slides.eq(this.currentSlide).outerHeight(true);
	      this.$list.animate({
	        height: targetHeight
	      }, this.options.speed);
	    }
	  },
	  animateSlide: function animateSlide(targetLeft, callback) {
	    var _this = this;

	    var animProps = {};

	    this.animateHeight();

	    if (this.options.rtl === true && this.options.vertical === false) {
	      targetLeft = -targetLeft;
	    }
	    if (this.transformsEnabled === false) {
	      if (this.options.vertical === false) {
	        this.$slideTrack.animate({
	          left: targetLeft
	        }, this.options.speed, this.options.easing, callback);
	      } else {
	        this.$slideTrack.animate({
	          top: targetLeft
	        }, this.options.speed, this.options.easing, callback);
	      }
	    } else if (this.cssTransitions === false) {
	      if (this.options.rtl === true) {
	        this.currentLeft = -this.currentLeft;
	      }
	      $({
	        animStart: this.currentLeft
	      }).animate({
	        animStart: targetLeft
	      }, {
	        duration: this.options.speed,
	        easing: this.options.easing,
	        step: function step(now) {
	          now = Math.ceil(now);
	          if (_this.options.vertical === false) {
	            animProps[_this.animType] = "translate(" + now + "px, 0px)";
	            _this.$slideTrack.css(animProps);
	          } else {
	            animProps[_this.animType] = "translate(0px," + now + "px)";
	            _this.$slideTrack.css(animProps);
	          }
	        },
	        complete: function complete() {
	          if (callback) {
	            callback.call();
	          }
	        }
	      });
	    } else {

	      this.applyTransition();
	      targetLeft = Math.ceil(targetLeft);

	      if (this.options.vertical === false) {
	        animProps[this.animType] = "translate3d(" + targetLeft + "px, 0px, 0px)";
	      } else {
	        animProps[this.animType] = "translate3d(0px," + targetLeft + "px, 0px)";
	      }
	      this.$slideTrack.css(animProps);

	      setTimeout(function () {

	        _this.disableTransition();

	        if (callback) {
	          callback.call();
	        }
	      }, this.options.speed);
	    }
	  },
	  applyTransition: function applyTransition(slide) {
	    var transition = {};

	    if (this.options.fade === false) {
	      transition[this.transitionType] = this.transformType + " " + this.options.speed + "ms " + this.options.cssEase;
	    } else {
	      transition[this.transitionType] = "opacity " + this.options.speed + "ms " + this.options.cssEase;
	    }

	    if (this.options.fade === false) {
	      this.$slideTrack.css(transition);
	    } else {
	      this.$slides.eq(slide).css(transition);
	    }
	  },
	  disableTransition: function disableTransition(slide) {
	    var transition = {};

	    transition[this.transitionType] = "";

	    if (this.options.fade === false) {
	      this.$slideTrack.css(transition);
	    } else {
	      this.$slides.eq(slide).css(transition);
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  buildArrows: function buildArrows() {
	    if (this.options.arrows === true) {

	      this.$prevArrow = $(this.options.prevArrow).addClass("slick-arrow");
	      this.$nextArrow = $(this.options.nextArrow).addClass("slick-arrow");

	      if (this.slideCount > this.options.slidesToShow) {

	        this.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
	        this.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");

	        if (this.htmlExpr.test(this.options.prevArrow)) {
	          this.$prevArrow.prependTo(this.options.appendArrows);
	        }

	        if (this.htmlExpr.test(this.options.nextArrow)) {
	          this.$nextArrow.appendTo(this.options.appendArrows);
	        }

	        if (this.options.infinite !== true) {
	          this.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
	        }
	      } else {

	        this.$prevArrow.add(this.$nextArrow).addClass("slick-hidden").attr({
	          "aria-disabled": "true",
	          "tabindex": "-1"
	        });
	      }
	    }
	  },
	  updateArrows: function updateArrows() {
	    if (this.options.arrows === true && this.slideCount > this.options.slidesToShow && this.options.infinite === false) {

	      this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
	      this.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");

	      if (this.currentSlide === 0) {
	        this.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
	        this.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
	      } else if (this.currentSlide >= this.slideCount - this.options.slidesToShow && this.options.centerMode === false) {

	        this.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
	        this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
	      } else if (this.currentSlide >= this.slideCount - 1 && this.options.centerMode === true) {

	        this.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
	        this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
	      }
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  autoPlay: function autoPlay() {
	    if (this.autoPlayTimer) {
	      clearInterval(this.autoPlayTimer);
	    }

	    if (this.slideCount > this.options.slidesToShow && this.paused !== true) {
	      this.autoPlayTimer = setInterval(this.autoPlayIterator, this.options.autoplaySpeed);
	    }
	  },
	  autoPlayClear: function autoPlayClear() {
	    if (this.autoPlayTimer) {
	      clearInterval(this.autoPlayTimer);
	    }
	  },
	  autoPlayIterator: function autoPlayIterator() {
	    if (this.options.infinite === false) {

	      if (this.direction === 1) {

	        if (this.currentSlide + 1 === this.slideCount - 1) {
	          this.direction = 0;
	        }

	        this.slideHandler(this.currentSlide + this.options.slidesToScroll);
	      } else {

	        if (this.currentSlide - 1 === 0) {
	          this.direction = 1;
	        }

	        this.slideHandler(this.currentSlide - this.options.slidesToScroll);
	      }
	    } else {
	      this.slideHandler(this.currentSlide + this.options.slidesToScroll);
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	
	/*eslint-disable max-statements, complexity */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _objectAssign = __webpack_require__(1);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  buildOut: function buildOut() {
	    this.$slides = this.$slider.children(this.options.slide + ":not(.slick-cloned)").addClass("slick-slide");

	    this.slideCount = this.$slides.length;

	    this.$slides.each(function (index, element) {
	      $(element).attr("data-slick-index", index).data("originalStyling", $(element).attr("style") || "");
	    });

	    this.$slidesCache = this.$slides;

	    this.$slider.addClass("slick-slider");

	    this.$slideTrack = this.slideCount === 0 ? $("<div class=\"slick-track\"/>").appendTo(this.$slider) : this.$slides.wrapAll("<div class=\"slick-track\"/>").parent();

	    this.$list = this.$slideTrack.wrap("<div aria-live=\"polite\" class=\"slick-list\"/>").parent();
	    this.$slideTrack.css("opacity", 0);

	    if (this.options.centerMode === true || this.options.swipeToSlide === true) {
	      this.options.slidesToScroll = 1;
	    }

	    $("img[data-lazy]", this.$slider).not("[src]").addClass("slick-loading");

	    this.setupInfinite();

	    this.buildArrows();

	    this.buildDots();

	    this.updateDots();

	    this.setSlideClasses(typeof this.currentSlide === "number" ? this.currentSlide : 0);

	    if (this.options.draggable === true) {
	      this.$list.addClass("draggable");
	    }
	  },
	  destroy: function destroy(refresh) {
	    this.autoPlayClear();

	    this.touchObject = {};

	    this.cleanUpEvents();

	    $(".slick-cloned", this.$slider).detach();

	    if (this.$dots) {
	      this.$dots.remove();
	    }

	    if (this.$prevArrow && this.$prevArrow.length) {

	      this.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");

	      if (this.htmlExpr.test(this.options.prevArrow)) {
	        this.$prevArrow.remove();
	      }
	    }

	    if (this.$nextArrow && this.$nextArrow.length) {

	      this.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");

	      if (this.htmlExpr.test(this.options.nextArrow)) {
	        this.$nextArrow.remove();
	      }
	    }

	    if (this.$slides) {

	      this.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function (i, slide) {
	        $(slide).attr("style", $(slide).data("originalStyling"));
	      });

	      this.$slideTrack.children(this.options.slide).detach();

	      this.$slideTrack.detach();

	      this.$list.detach();

	      this.$slider.append(this.$slides);
	    }

	    this.cleanUpRows();

	    this.$slider.removeClass("slick-slider");
	    this.$slider.removeClass("slick-initialized");

	    this.unslicked = true;

	    if (!refresh) {
	      this.$slider.trigger("destroy", [this]);
	    }
	  },
	  init: function init(creation) {
	    if (!$(this.$slider).hasClass("slick-initialized")) {

	      $(this.$slider).addClass("slick-initialized");

	      this.buildRows();
	      this.buildOut();
	      this.setProps();
	      this.startLoad();
	      this.loadSlider();
	      this.initializeEvents();
	      this.updateArrows();
	      this.updateDots();
	      if (this.callback) {
	        this.callback();
	      }
	    }

	    if (creation) {
	      this.$slider.trigger("init", [this]);
	    }

	    if (this.options.accessibility === true) {
	      this.initADA();
	    }
	  },
	  initUI: function initUI() {
	    if (this.options.arrows === true && this.slideCount > this.options.slidesToShow) {
	      this.$prevArrow.show();
	      this.$nextArrow.show();
	    }

	    if (this.options.dots === true && this.slideCount > this.options.slidesToShow) {
	      this.$dots.show();
	    }

	    if (this.options.autoplay === true) {
	      this.autoPlay();
	    }
	  },
	  loadSlider: function loadSlider() {
	    this.setPosition();

	    this.$slideTrack.css({
	      opacity: 1
	    });

	    this.$slider.removeClass("slick-loading");

	    this.initUI();

	    if (this.options.lazyLoad === "progressive") {
	      this.progressiveLazyLoad();
	    }
	  },
	  refresh: function refresh(initializing) {
	    var firstVisible = this.slideCount - this.options.slidesToShow;

	    // check that the new breakpoint can actually accept the
	    // "current slide" as the current slide, otherwise we need
	    // to set it to the closest possible value.
	    if (!this.options.infinite) {
	      if (this.slideCount <= this.options.slidesToShow) {
	        this.currentSlide = 0;
	      } else if (this.currentSlide > firstVisible) {
	        this.currentSlide = firstVisible;
	      }
	    }

	    this.destroy(true);

	    (0, _objectAssign2["default"])(this, this.initials, {
	      currentSlide: this.currentSlide
	    });

	    this.init();

	    if (!initializing) {

	      this.changeSlide({
	        data: {
	          message: "index",
	          index: this.currentSlide
	        }
	      }, false);
	    }
	  },
	  reinit: function reinit() {
	    this.$slides = this.$slideTrack.children(this.options.slide).addClass("slick-slide");

	    this.slideCount = this.$slides.length;

	    if (this.currentSlide >= this.slideCount && this.currentSlide !== 0) {
	      this.currentSlide = this.currentSlide - this.options.slidesToScroll;
	    }

	    if (this.slideCount <= this.options.slidesToShow) {
	      this.currentSlide = 0;
	    }

	    this.registerBreakpoints();

	    this.setProps();
	    this.setupInfinite();
	    this.buildArrows();
	    this.updateArrows();
	    this.initArrowEvents();
	    this.buildDots();
	    this.updateDots();
	    this.initDotEvents();

	    this.checkResponsive(false, true);

	    if (this.options.focusOnSelect === true) {
	      $(this.$slideTrack).children().on("click.slick", this.selectHandler);
	    }

	    this.setSlideClasses(0);

	    this.setPosition();

	    this.$slider.trigger("reInit", [this]);

	    if (this.options.autoplay === true) {
	      this.focusHandler();
	    }
	  },
	  setupInfinite: function setupInfinite() {
	    if (this.options.fade === true) {
	      this.options.centerMode = false;
	    }

	    if (this.options.infinite === true && this.options.fade === false) {

	      var slideIndex = null;
	      var infiniteCount = null;

	      if (this.slideCount > this.options.slidesToShow) {

	        if (this.options.centerMode === true) {
	          infiniteCount = this.options.slidesToShow + 1;
	        } else {
	          infiniteCount = this.options.slidesToShow;
	        }

	        var i = this.slideCount;

	        for (i; i > this.slideCount - infiniteCount; i -= 1) {
	          slideIndex = i - 1;
	          $(this.$slides[slideIndex]).clone(true).attr("id", "").attr("data-slick-index", slideIndex - this.slideCount).prependTo(this.$slideTrack).addClass("slick-cloned");
	        }
	        for (i = 0; i < infiniteCount; i += 1) {
	          slideIndex = i;
	          $(this.$slides[slideIndex]).clone(true).attr("id", "").attr("data-slick-index", slideIndex + this.slideCount).appendTo(this.$slideTrack).addClass("slick-cloned");
	        }
	        this.$slideTrack.find(".slick-cloned").find("[id]").attr("id", "");
	      }
	    }
	  },
	  startLoad: function startLoad() {
	    if (this.options.arrows === true && this.slideCount > this.options.slidesToShow) {
	      this.$prevArrow.hide();
	      this.$nextArrow.hide();
	    }

	    if (this.options.dots === true && this.slideCount > this.options.slidesToShow) {
	      this.$dots.hide();
	    }

	    this.$slider.addClass("slick-loading");
	  },
	  unload: function unload() {
	    $(".slick-cloned", this.$slider).remove();

	    if (this.$dots) {
	      this.$dots.remove();
	    }

	    if (this.$prevArrow && this.htmlExpr.test(this.options.prevArrow)) {
	      this.$prevArrow.remove();
	    }

	    if (this.$nextArrow && this.htmlExpr.test(this.options.nextArrow)) {
	      this.$nextArrow.remove();
	    }

	    this.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
	  },
	  unslick: function unslick(fromBreakpoint) {
	    this.$slider.trigger("unslick", [this, fromBreakpoint]);
	    this.destroy();
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 8 */
/***/ function(module, exports) {

	
	/*eslint-disable max-statements, complexity */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  asNavFor: function asNavFor(index) {
	    var asNavFor = null;
	    if (this.options.asNavFor && this.options.asNavFor !== null) {
	      asNavFor = $(this.options.asNavFor).not(this.$slider);
	    }

	    if (asNavFor !== null && typeof asNavFor === "object") {
	      asNavFor.each(function (i, el) {
	        var target = $(el).slick("getSlick");
	        if (!target.unslicked) {
	          target.slideHandler(index, true);
	        }
	      });
	    }
	  },
	  checkNavigable: function checkNavigable(index) {
	    var navigables = this.getNavigableIndexes();
	    var prevNavigable = 0;
	    if (index > navigables[navigables.length - 1]) {
	      index = navigables[navigables.length - 1];
	    } else {
	      var n = 0;
	      for (n in navigables) {
	        if (index < navigables[n]) {
	          index = prevNavigable;
	          break;
	        }
	        prevNavigable = navigables[n];
	      }
	    }

	    return index;
	  },
	  postSlide: function postSlide(index) {
	    this.$slider.trigger("afterChange", [this, index]);

	    this.animating = false;

	    this.setPosition();

	    this.swipeLeft = null;

	    if (this.options.autoplay === true && this.paused === false) {
	      this.autoPlay();
	    }
	    if (this.options.accessibility === true) {
	      this.initADA();
	    }
	  },
	  selectHandler: function selectHandler(event) {
	    var targetElement = $(event.target).is(".slick-slide") ? $(event.target) : $(event.target).parents(".slick-slide");

	    var index = parseInt(targetElement.attr("data-slick-index"));

	    if (!index) {
	      index = 0;
	    }

	    if (this.slideCount <= this.options.slidesToShow) {

	      this.setSlideClasses(index);
	      this.asNavFor(index);
	      return;
	    }

	    this.slideHandler(index);
	  },
	  slideHandler: function slideHandler(index, sync, dontAnimate) {
	    var _this = this;

	    sync = sync || false;

	    if (this.animating === true && this.options.waitForAnimate === true) {
	      return;
	    }

	    if (this.options.fade === true && this.currentSlide === index) {
	      return;
	    }

	    if (this.slideCount <= this.options.slidesToShow) {
	      return;
	    }

	    if (sync === false) {
	      this.asNavFor(index);
	    }

	    var targetSlide = index;
	    var targetLeft = this.getLeft(targetSlide);
	    var slideLeft = this.getLeft(this.currentSlide);

	    this.currentLeft = this.swipeLeft === null ? slideLeft : this.swipeLeft;

	    if (this.options.infinite === false && this.options.centerMode === false && (index < 0 || index > this.getDotCount() * this.options.slidesToScroll)) {
	      if (this.options.fade === false) {
	        targetSlide = this.currentSlide;
	        if (dontAnimate !== true) {
	          this.animateSlide(slideLeft, function () {
	            _this.postSlide(targetSlide);
	          });
	        } else {
	          this.postSlide(targetSlide);
	        }
	      }
	      return;
	    } else if (this.options.infinite === false && this.options.centerMode === true && (index < 0 || index > this.slideCount - this.options.slidesToScroll)) {
	      if (this.options.fade === false) {
	        targetSlide = this.currentSlide;
	        if (dontAnimate !== true) {
	          this.animateSlide(slideLeft, function () {
	            _this.postSlide(targetSlide);
	          });
	        } else {
	          this.postSlide(targetSlide);
	        }
	      }
	      return;
	    }

	    if (this.options.autoplay === true) {
	      clearInterval(this.autoPlayTimer);
	    }

	    var animSlide = targetSlide;

	    if (targetSlide < 0) {
	      if (this.slideCount % this.options.slidesToScroll !== 0) {
	        animSlide = this.slideCount - this.slideCount % this.options.slidesToScroll;
	      } else {
	        animSlide = this.slideCount + targetSlide;
	      }
	    } else if (targetSlide >= this.slideCount) {
	      if (this.slideCount % this.options.slidesToScroll !== 0) {
	        animSlide = 0;
	      } else {
	        animSlide = targetSlide - this.slideCount;
	      }
	    }

	    this.animating = true;

	    this.$slider.trigger("beforeChange", [this, this.currentSlide, animSlide]);

	    var oldSlide = this.currentSlide;
	    this.currentSlide = animSlide;

	    this.setSlideClasses(this.currentSlide);

	    this.updateDots();
	    this.updateArrows();

	    if (this.options.fade === true) {
	      if (dontAnimate !== true) {

	        this.fadeSlideOut(oldSlide);

	        this.fadeSlide(animSlide, function () {
	          _this.postSlide(animSlide);
	        });
	      } else {
	        this.postSlide(animSlide);
	      }
	      this.animateHeight();
	      return;
	    }

	    if (dontAnimate !== true) {
	      this.animateSlide(targetLeft, function () {
	        _this.postSlide(animSlide);
	      });
	    } else {
	      this.postSlide(animSlide);
	    }
	  },
	  visibility: function visibility() {
	    if (document.hidden) {
	      this.paused = true;
	      this.autoPlayClear();
	    } else if (this.options.autoplay === true) {
	      this.paused = false;
	      this.autoPlay();
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  buildDots: function buildDots() {
	    var dotString = "";

	    if (this.options.dots === true && this.slideCount > this.options.slidesToShow) {

	      dotString = "<ul class=\"" + this.options.dotsClass + "\">";

	      for (var i = 0; i <= this.getDotCount(); i += 1) {
	        dotString += "<li>" + this.options.customPaging.call(this, this, i) + "</li>";
	      }

	      dotString += "</ul>";

	      this.$dots = $(dotString).appendTo(this.options.appendDots);

	      this.$dots.find("li").first().addClass("slick-active").attr("aria-hidden", "false");
	    }
	  },
	  getDotCount: function getDotCount() {
	    var breakPoint = 0;
	    var counter = 0;
	    var pagerQty = 0;

	    if (this.options.infinite === true) {
	      while (breakPoint < this.slideCount) {
	        ++pagerQty;
	        breakPoint = counter + this.options.slidesToShow;
	        counter += this.options.slidesToScroll <= this.options.slidesToShow ? this.options.slidesToScroll : this.options.slidesToShow;
	      }
	    } else if (this.options.centerMode === true) {
	      pagerQty = this.slideCount;
	    } else {
	      while (breakPoint < this.slideCount) {
	        ++pagerQty;
	        breakPoint = counter + this.options.slidesToShow;
	        counter += this.options.slidesToScroll <= this.options.slidesToShow ? this.options.slidesToScroll : this.options.slidesToShow;
	      }
	    }
	    return pagerQty - 1;
	  },
	  updateDots: function updateDots() {
	    if (this.$dots !== null) {

	      this.$dots.find("li").removeClass("slick-active").attr("aria-hidden", "true");

	      this.$dots.find("li").eq(Math.floor(this.currentSlide / this.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden", "false");
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 10 */
/***/ function(module, exports) {

	
	/*eslint-disable max-statements, complexity */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  cleanUpEvents: function cleanUpEvents() {
	    if (this.options.dots && this.$dots !== null) {
	      $("li", this.$dots).off("click.slick", this.changeSlide);

	      if (this.options.pauseOnDotsHover === true && this.options.autoplay === true) {
	        $("li", this.$dots).off("mouseenter.slick", $.proxy(this.setPaused, this, true)).off("mouseleave.slick", $.proxy(this.setPaused, this, false));
	      }
	    }

	    if (this.options.arrows === true && this.slideCount > this.options.slidesToShow) {
	      if (this.$prevArrow) {
	        this.$prevArrow.off("click.slick", this.changeSlide);
	      }
	      if (this.$nextArrow) {
	        this.$nextArrow.off("click.slick", this.changeSlide);
	      }
	    }

	    this.$list.off("touchstart.slick mousedown.slick", this.swipeHandler);
	    this.$list.off("touchmove.slick mousemove.slick", this.swipeHandler);
	    this.$list.off("touchend.slick mouseup.slick", this.swipeHandler);
	    this.$list.off("touchcancel.slick mouseleave.slick", this.swipeHandler);

	    this.$list.off("click.slick", this.clickHandler);

	    $(document).off(this.visibilityChange, this.visibility);

	    this.$list.off("mouseenter.slick", $.proxy(this.setPaused, this, true));
	    this.$list.off("mouseleave.slick", $.proxy(this.setPaused, this, false));

	    if (this.options.accessibility === true) {
	      this.$list.off("keydown.slick", this.keyHandler);
	    }

	    if (this.options.focusOnSelect === true) {
	      $(this.$slideTrack).children().off("click.slick", this.selectHandler);
	    }

	    $(window).off("orientationchange.slick.slick-" + this.instanceUid, this.orientationChange);

	    $(window).off("resize.slick.slick-" + this.instanceUid, this.resize);

	    $("[draggable!=true]", this.$slideTrack).off("dragstart", this.preventDefault);

	    $(window).off("load.slick.slick-" + this.instanceUid, this.setPosition);
	    $(document).off("ready.slick.slick-" + this.instanceUid, this.setPosition);
	  },
	  focusHandler: function focusHandler() {
	    var _this = this;

	    this.$slider.on("focus.slick blur.slick", "*", function (event) {
	      event.stopImmediatePropagation();
	      var sf = $(_this);
	      setTimeout(function () {
	        if (_this.isPlay) {
	          if (sf.is(":focus")) {
	            _this.autoPlayClear();
	            _this.paused = true;
	          } else {
	            _this.paused = false;
	            _this.autoPlay();
	          }
	        }
	      }, 0);
	    });
	  },
	  initArrowEvents: function initArrowEvents() {
	    if (this.options.arrows === true && this.slideCount > this.options.slidesToShow) {
	      this.$prevArrow.on("click.slick", {
	        message: "previous"
	      }, this.changeSlide);
	      this.$nextArrow.on("click.slick", {
	        message: "next"
	      }, this.changeSlide);
	    }
	  },
	  initDotEvents: function initDotEvents() {
	    if (this.options.dots === true && this.slideCount > this.options.slidesToShow) {
	      $("li", this.$dots).on("click.slick", {
	        message: "index"
	      }, this.changeSlide);
	    }

	    if (this.options.dots === true && this.options.pauseOnDotsHover === true && this.options.autoplay === true) {
	      $("li", this.$dots).on("mouseenter.slick", $.proxy(this.setPaused, this, true)).on("mouseleave.slick", $.proxy(this.setPaused, this, false));
	    }
	  },
	  initializeEvents: function initializeEvents() {
	    this.initArrowEvents();

	    this.initDotEvents();

	    this.$list.on("touchstart.slick mousedown.slick", {
	      action: "start"
	    }, this.swipeHandler);
	    this.$list.on("touchmove.slick mousemove.slick", {
	      action: "move"
	    }, this.swipeHandler);
	    this.$list.on("touchend.slick mouseup.slick", {
	      action: "end"
	    }, this.swipeHandler);
	    this.$list.on("touchcancel.slick mouseleave.slick", {
	      action: "end"
	    }, this.swipeHandler);

	    this.$list.on("click.slick", this.clickHandler);

	    $(document).on(this.visibilityChange, $.proxy(this.visibility, this));

	    this.$list.on("mouseenter.slick", $.proxy(this.setPaused, this, true));
	    this.$list.on("mouseleave.slick", $.proxy(this.setPaused, this, false));

	    if (this.options.accessibility === true) {
	      this.$list.on("keydown.slick", this.keyHandler);
	    }

	    if (this.options.focusOnSelect === true) {
	      $(this.$slideTrack).children().on("click.slick", this.selectHandler);
	    }

	    $(window).on("orientationchange.slick.slick-" + this.instanceUid, $.proxy(this.orientationChange, this));

	    $(window).on("resize.slick.slick-" + this.instanceUid, $.proxy(this.resize, this));

	    $("[draggable!=true]", this.$slideTrack).on("dragstart", this.preventDefault);

	    $(window).on("load.slick.slick-" + this.instanceUid, this.setPosition);
	    $(document).on("ready.slick.slick-" + this.instanceUid, this.setPosition);
	  },
	  keyHandler: function keyHandler(event) {
	    //Dont slide if the cursor is inside the form fields and arrow keys are pressed
	    if (!event.target.tagName.match("TEXTAREA|INPUT|SELECT")) {
	      if (event.keyCode === 37 && this.options.accessibility === true) {
	        this.changeSlide({
	          data: {
	            message: "previous"
	          }
	        });
	      } else if (event.keyCode === 39 && this.options.accessibility === true) {
	        this.changeSlide({
	          data: {
	            message: "next"
	          }
	        });
	      }
	    }
	  },
	  orientationChange: function orientationChange() {
	    this.checkResponsive();
	    this.setPosition();
	  },
	  preventDefault: function preventDefault(event) {
	    event.preventDefault();
	  },
	  resize: function resize() {
	    var _this2 = this;

	    if ($(window).width() !== this.windowWidth) {
	      clearTimeout(this.windowDelay);
	      this.windowDelay = window.setTimeout(function () {
	        _this2.windowWidth = $(window).width();
	        _this2.checkResponsive();
	        if (!_this2.unslicked) {
	          _this2.setPosition();
	        }
	      }, 50);
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  fadeSlide: function fadeSlide(slideIndex, callback) {
	    var _this = this;

	    if (this.cssTransitions === false) {

	      this.$slides.eq(slideIndex).css({
	        zIndex: this.options.zIndex
	      });

	      this.$slides.eq(slideIndex).animate({
	        opacity: 1
	      }, this.options.speed, this.options.easing, callback);
	    } else {

	      this.applyTransition(slideIndex);

	      this.$slides.eq(slideIndex).css({
	        opacity: 1,
	        zIndex: this.options.zIndex
	      });

	      if (callback) {
	        setTimeout(function () {

	          _this.disableTransition(slideIndex);

	          callback.call();
	        }, this.options.speed);
	      }
	    }
	  },
	  fadeSlideOut: function fadeSlideOut(slideIndex) {
	    if (this.cssTransitions === false) {

	      this.$slides.eq(slideIndex).animate({
	        opacity: 0,
	        zIndex: this.options.zIndex - 2
	      }, this.options.speed, this.options.easing);
	    } else {

	      this.applyTransition(slideIndex);

	      this.$slides.eq(slideIndex).css({
	        opacity: 0,
	        zIndex: this.options.zIndex - 2
	      });
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 12 */
/***/ function(module, exports) {

	
	/*eslint-disable max-statements, complexity */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  filter: function filter(_filter) {
	    if (_filter !== null) {

	      this.unload();

	      this.$slideTrack.children(this.options.slide).detach();

	      this.$slidesCache.filter(_filter).appendTo(this.$slideTrack);

	      this.reinit();
	    }
	  },
	  unfilter: function unfilter() {
	    if (this.$slidesCache !== null) {

	      this.unload();

	      this.$slideTrack.children(this.options.slide).detach();

	      this.$slidesCache.appendTo(this.$slideTrack);

	      this.reinit();
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 13 */
/***/ function(module, exports) {

	
	/*eslint-disable max-statements, complexity */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  getCurrent: function getCurrent() {
	    return this.currentSlide;
	  },
	  getLeft: function getLeft(slideIndex) {
	    this.slideOffset = 0;

	    var verticalHeight = this.$slides.first().outerHeight(true);
	    var targetLeft = 0;
	    var targetSlide = 0;
	    var verticalOffset = 0;

	    if (this.options.infinite === true) {
	      if (this.slideCount > this.options.slidesToShow) {
	        this.slideOffset = this.slideWidth * this.options.slidesToShow * -1;
	        verticalOffset = verticalHeight * this.options.slidesToShow * -1;
	      }
	      if (this.slideCount % this.options.slidesToScroll !== 0) {
	        if (slideIndex + this.options.slidesToScroll > this.slideCount && this.slideCount > this.options.slidesToShow) {

	          if (slideIndex > this.slideCount) {
	            this.slideOffset = (this.options.slidesToShow - (slideIndex - this.slideCount)) * this.slideWidth * -1;
	            verticalOffset = (this.options.slidesToShow - (slideIndex - this.slideCount)) * verticalHeight * -1;
	          } else {
	            this.slideOffset = this.slideCount % this.options.slidesToScroll * this.slideWidth * -1;
	            verticalOffset = this.slideCount % this.options.slidesToScroll * verticalHeight * -1;
	          }
	        }
	      }
	    } else if (slideIndex + this.options.slidesToShow > this.slideCount) {
	      this.slideOffset = slideIndex + this.options.slidesToShow - this.slideCount * this.slideWidth;
	      verticalOffset = slideIndex + this.options.slidesToShow - this.slideCount * verticalHeight;
	    }

	    if (this.slideCount <= this.options.slidesToShow) {
	      this.slideOffset = 0;
	      verticalOffset = 0;
	    }

	    if (this.options.centerMode === true && this.options.infinite === true) {
	      this.slideOffset += this.slideWidth * Math.floor(this.options.slidesToShow / 2) - this.slideWidth;
	    } else if (this.options.centerMode === true) {
	      this.slideOffset = 0;
	      this.slideOffset += this.slideWidth * Math.floor(this.options.slidesToShow / 2);
	    }

	    if (this.options.vertical === false) {
	      targetLeft = slideIndex * this.slideWidth * -1 + this.slideOffset;
	    } else {
	      targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
	    }

	    if (this.options.variableWidth === true) {

	      if (this.slideCount <= this.options.slidesToShow || this.options.infinite === false) {
	        targetSlide = this.$slideTrack.children(".slick-slide").eq(slideIndex);
	      } else {
	        targetSlide = this.$slideTrack.children(".slick-slide").eq(slideIndex + this.options.slidesToShow);
	      }

	      targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;

	      if (this.options.centerMode === true) {
	        if (this.slideCount <= this.options.slidesToShow || this.options.infinite === false) {
	          targetSlide = this.$slideTrack.children(".slick-slide").eq(slideIndex);
	        } else {
	          targetSlide = this.$slideTrack.children(".slick-slide").eq(slideIndex + this.options.slidesToShow + 1);
	        }
	        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
	        targetLeft += (this.$list.width() - targetSlide.outerWidth()) / 2;
	      }
	    }

	    return targetLeft;
	  },
	  getOption: function getOption(option) {
	    return this.options[option];
	  },
	  getNavigableIndexes: function getNavigableIndexes() {
	    var indexes = [];

	    var breakPoint = 0;
	    var counter = 0;
	    var max = 0;

	    if (this.options.infinite === false) {
	      max = this.slideCount;
	    } else {
	      breakPoint = this.options.slidesToScroll * -1;
	      counter = this.options.slidesToScroll * -1;
	      max = this.slideCount * 2;
	    }

	    while (breakPoint < max) {
	      indexes.push(breakPoint);
	      breakPoint = counter + this.options.slidesToScroll;
	      counter += this.options.slidesToScroll <= this.options.slidesToShow ? this.options.slidesToScroll : this.options.slidesToShow;
	    }

	    return indexes;
	  },
	  getSlick: function getSlick() {
	    return this;
	  },
	  getSlideCount: function getSlideCount() {
	    var _this = this;

	    var swipedSlide = 0;

	    var centerOffset = this.options.centerMode === true ? this.slideWidth * Math.floor(this.options.slidesToShow / 2) : 0;

	    if (this.options.swipeToSlide === true) {
	      this.$slideTrack.find(".slick-slide").each(function (index, slide) {
	        if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _this.swipeLeft * -1) {
	          swipedSlide = slide;
	          return 0;
	        }
	      });

	      return Math.abs($(swipedSlide).attr("data-slick-index") - this.currentSlide) || 1;
	    } else {
	      return this.options.slidesToScroll;
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 14 */
/***/ function(module, exports) {

	
	/*eslint-disable max-statements, complexity */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  loadImages: function loadImages(imagesScope) {
	    $("img[data-lazy]", imagesScope).each(function (i, img) {

	      var image = $(img);
	      var imageSource = $(img).attr("data-lazy");
	      var imageToLoad = document.createElement("img");

	      imageToLoad.onload = function () {
	        image.animate({
	          opacity: 0
	        }, 100, function () {
	          image.attr("src", imageSource).animate({
	            opacity: 1
	          }, 200, function () {
	            image.removeAttr("data-lazy").removeClass("slick-loading");
	          });
	        });
	      };

	      imageToLoad.src = imageSource;
	    });
	  },
	  lazyLoad: function lazyLoad() {
	    var rangeStart = null;
	    var rangeEnd = null;

	    if (this.options.centerMode === true) {
	      if (this.options.infinite === true) {
	        rangeStart = this.currentSlide + (this.options.slidesToShow / 2 + 1);
	        rangeEnd = rangeStart + this.options.slidesToShow + 2;
	      } else {
	        rangeStart = Math.max(0, this.currentSlide - (this.options.slidesToShow / 2 + 1));
	        rangeEnd = 2 + (this.options.slidesToShow / 2 + 1) + this.currentSlide;
	      }
	    } else {
	      rangeStart = this.options.infinite ? this.options.slidesToShow + this.currentSlide : this.currentSlide;
	      rangeEnd = rangeStart + this.options.slidesToShow;
	      if (this.options.fade === true) {
	        if (rangeStart > 0) {
	          rangeStart--;
	        }
	        if (rangeEnd <= this.slideCount) {
	          rangeEnd++;
	        }
	      }
	    }

	    var cloneRange = null;
	    var loadRange = this.$slider.find(".slick-slide").slice(rangeStart, rangeEnd);

	    this.loadImages(loadRange);

	    if (this.slideCount <= this.options.slidesToShow) {
	      cloneRange = this.$slider.find(".slick-slide");
	      this.loadImages(cloneRange);
	    } else if (this.currentSlide >= this.slideCount - this.options.slidesToShow) {
	      cloneRange = this.$slider.find(".slick-cloned").slice(0, this.options.slidesToShow);
	      this.loadImages(cloneRange);
	    } else if (this.currentSlide === 0) {
	      cloneRange = this.$slider.find(".slick-cloned").slice(this.options.slidesToShow * -1);
	      this.loadImages(cloneRange);
	    }
	  },
	  progressiveLazyLoad: function progressiveLazyLoad() {
	    var _this = this;

	    var imgCount = $("img[data-lazy]", this.$slider).length;

	    if (imgCount > 0) {
	      (function () {
	        var targetImage = $("img[data-lazy]", _this.$slider).first();
	        targetImage.attr("src", null);
	        targetImage.attr("src", targetImage.attr("data-lazy")).removeClass("slick-loading").load(function () {
	          targetImage.removeAttr("data-lazy");
	          _this.progressiveLazyLoad();

	          if (_this.options.adaptiveHeight === true) {
	            _this.setPosition();
	          }
	        }).error(function () {
	          targetImage.removeAttr("data-lazy");
	          _this.progressiveLazyLoad();
	        });
	      })();
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	
	/*eslint-disable max-statements, complexity, max-depth */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _objectAssign = __webpack_require__(1);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  checkResponsive: function checkResponsive(initial, forceUpdate) {
	    var sliderWidth = this.$slider.width();
	    var windowWidth = window.innerWidth || $(window).width();

	    var respondToWidth = null;
	    var triggerBreakpoint = false;

	    if (this.respondTo === "window") {
	      respondToWidth = windowWidth;
	    } else if (this.respondTo === "slider") {
	      respondToWidth = sliderWidth;
	    } else if (this.respondTo === "min") {
	      respondToWidth = Math.min(windowWidth, sliderWidth);
	    }

	    if (this.options.responsive && this.options.responsive.length && this.options.responsive !== null) {

	      var targetBreakpoint = null;
	      var breakpoint = null;

	      for (breakpoint in this.breakpoints) {
	        if (this.breakpoints.hasOwnProperty(breakpoint)) {
	          if (this.originalSettings.mobileFirst === false) {
	            if (respondToWidth < this.breakpoints[breakpoint]) {
	              targetBreakpoint = this.breakpoints[breakpoint];
	            }
	          } else if (respondToWidth > this.breakpoints[breakpoint]) {
	            targetBreakpoint = this.breakpoints[breakpoint];
	          }
	        }
	      }

	      if (targetBreakpoint !== null) {
	        if (this.activeBreakpoint !== null) {
	          if (targetBreakpoint !== this.activeBreakpoint || forceUpdate) {
	            this.activeBreakpoint = targetBreakpoint;
	            if (this.breakpointSettings[targetBreakpoint] === "unslick") {
	              this.unslick(targetBreakpoint);
	            } else {
	              this.options = (0, _objectAssign2["default"])({}, this.originalSettings, this.breakpointSettings[targetBreakpoint]);
	              if (initial === true) {
	                this.currentSlide = this.options.initialSlide;
	              }
	              this.refresh(initial);
	            }
	            triggerBreakpoint = targetBreakpoint;
	          }
	        } else {
	          this.activeBreakpoint = targetBreakpoint;
	          if (this.breakpointSettings[targetBreakpoint] === "unslick") {
	            this.unslick(targetBreakpoint);
	          } else {
	            this.options = (0, _objectAssign2["default"])({}, this.originalSettings, this.breakpointSettings[targetBreakpoint]);
	            if (initial === true) {
	              this.currentSlide = this.options.initialSlide;
	            }
	            this.refresh(initial);
	          }
	          triggerBreakpoint = targetBreakpoint;
	        }
	      } else if (this.activeBreakpoint !== null) {
	        this.activeBreakpoint = null;
	        this.options = this.originalSettings;
	        if (initial === true) {
	          this.currentSlide = this.options.initialSlide;
	        }
	        this.refresh(initial);
	        triggerBreakpoint = targetBreakpoint;
	      }

	      // only trigger breakpoints during an actual break. not on initialize.
	      if (!initial && triggerBreakpoint !== false) {
	        this.$slider.trigger("breakpoint", [this, triggerBreakpoint]);
	      }
	    }
	  },
	  registerBreakpoints: function registerBreakpoints() {
	    var _this = this;

	    var responsiveSettings = this.options.responsive || null;

	    if ($.type(responsiveSettings) === "array" && responsiveSettings.length) {

	      this.respondTo = this.options.respondTo || "window";

	      var breakpoint = null;

	      for (breakpoint in responsiveSettings) {

	        var currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

	        if (responsiveSettings.hasOwnProperty(breakpoint)) {

	          var l = this.breakpoints.length - 1;
	          // loop through the breakpoints and cut out any existing
	          // ones with the same breakpoint number, we don"t want dupes.
	          while (l >= 0) {
	            if (this.breakpoints[l] && this.breakpoints[l] === currentBreakpoint) {
	              this.breakpoints.splice(l, 1);
	            }
	            l--;
	          }

	          this.breakpoints.push(currentBreakpoint);
	          this.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
	        }
	      }

	      this.breakpoints.sort(function (a, b) {
	        return _this.options.mobileFirst ? a - b : b - a;
	      });
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 16 */
/***/ function(module, exports) {

	
	/*eslint-disable max-statements, complexity, max-depth */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  buildRows: function buildRows() {
	    var newSlides = document.createDocumentFragment();
	    var originalSlides = this.$slider.children();

	    if (this.options.rows > 1) {

	      var slidesPerSection = this.options.slidesPerRow * this.options.rows;
	      var numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);

	      for (var a = 0; a < numOfSlides; a++) {
	        var slide = document.createElement("div");
	        for (var b = 0; b < this.options.rows; b++) {
	          var row = document.createElement("div");
	          for (var c = 0; c < this.options.slidesPerRow; c++) {
	            var target = a * slidesPerSection + b * this.options.slidesPerRow + c;
	            if (originalSlides.get(target)) {
	              row.appendChild(originalSlides.get(target));
	            }
	          }
	          slide.appendChild(row);
	        }
	        newSlides.appendChild(slide);
	      }

	      this.$slider.html(newSlides);
	      this.$slider.children().children().children().css({
	        "width": 100 / this.options.slidesPerRow + "%",
	        "display": "inline-block"
	      });
	    }
	  },
	  cleanUpRows: function cleanUpRows() {
	    if (this.options.rows > 1) {
	      var originalSlides = this.$slides.children().children();
	      originalSlides.removeAttr("style");
	      this.$slider.html(originalSlides);
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 17 */
/***/ function(module, exports) {

	
	/*eslint-disable max-statements, complexity, max-depth */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  setCSS: function setCSS(position) {
	    var positionProps = {};

	    if (this.options.rtl === true) {
	      position = -position;
	    }
	    var x = this.positionProp === "left" ? Math.ceil(position) + "px" : "0px";
	    var y = this.positionProp === "top" ? Math.ceil(position) + "px" : "0px";

	    positionProps[this.positionProp] = position;

	    if (this.transformsEnabled === false) {
	      this.$slideTrack.css(positionProps);
	    } else {
	      positionProps = {};
	      if (this.cssTransitions === false) {
	        positionProps[this.animType] = "translate(" + x + ", " + y + ")";
	        this.$slideTrack.css(positionProps);
	      } else {
	        positionProps[this.animType] = "translate3d(" + x + ", " + y + ", 0px)";
	        this.$slideTrack.css(positionProps);
	      }
	    }
	  },
	  setDimensions: function setDimensions() {
	    if (this.options.vertical === false) {
	      if (this.options.centerMode === true) {
	        this.$list.css({
	          padding: "0px " + this.options.centerPadding
	        });
	      }
	    } else {
	      this.$list.height(this.$slides.first().outerHeight(true) * this.options.slidesToShow);
	      if (this.options.centerMode === true) {
	        this.$list.css({
	          padding: this.options.centerPadding + " 0px"
	        });
	      }
	    }

	    this.listWidth = this.$list.width();
	    this.listHeight = this.$list.height();

	    if (this.options.vertical === false && this.options.variableWidth === false) {
	      this.slideWidth = Math.ceil(this.listWidth / this.options.slidesToShow);
	      this.$slideTrack.width(Math.ceil(this.slideWidth * this.$slideTrack.children(".slick-slide").length));
	    } else if (this.options.variableWidth === true) {
	      this.$slideTrack.width(5000 * this.slideCount);
	    } else {
	      this.slideWidth = Math.ceil(this.listWidth);
	      this.$slideTrack.height(Math.ceil(this.$slides.first().outerHeight(true) * this.$slideTrack.children(".slick-slide").length));
	    }

	    var offset = this.$slides.first().outerWidth(true) - this.$slides.first().width();
	    if (this.options.variableWidth === false) {
	      this.$slideTrack.children(".slick-slide").width(this.slideWidth - offset);
	    }
	  },
	  setFade: function setFade() {
	    var _this = this;

	    this.$slides.each(function (index, element) {
	      var targetLeft = _this.slideWidth * index * -1;
	      if (_this.options.rtl === true) {
	        $(element).css({
	          position: "relative",
	          right: targetLeft,
	          top: 0,
	          zIndex: _this.options.zIndex - 2,
	          opacity: 0
	        });
	      } else {
	        $(element).css({
	          position: "relative",
	          left: targetLeft,
	          top: 0,
	          zIndex: _this.options.zIndex - 2,
	          opacity: 0
	        });
	      }
	    });

	    this.$slides.eq(this.currentSlide).css({
	      zIndex: this.options.zIndex - 1,
	      opacity: 1
	    });
	  },
	  setHeight: function setHeight() {
	    if (this.options.slidesToShow === 1 && this.options.adaptiveHeight === true && this.options.vertical === false) {
	      var targetHeight = this.$slides.eq(this.currentSlide).outerHeight(true);
	      this.$list.css("height", targetHeight);
	    }
	  },
	  setOption: function setOption(option, value, refresh) {
	    if (option === "responsive" && $.type(value) === "array") {
	      var item = null;
	      for (item in value) {
	        if ($.type(this.options.responsive) !== "array") {
	          this.options.responsive = [value[item]];
	        } else {
	          var l = this.options.responsive.length - 1;
	          // loop through the responsive object and splice out duplicates.
	          while (l >= 0) {
	            if (this.options.responsive[l].breakpoint === value[item].breakpoint) {
	              this.options.responsive.splice(l, 1);
	            }
	            l--;
	          }
	          this.options.responsive.push(value[item]);
	        }
	      }
	    } else {
	      this.options[option] = value;
	    }

	    if (refresh === true) {
	      this.unload();
	      this.reinit();
	    }
	  },
	  setPosition: function setPosition() {
	    this.setDimensions();

	    this.setHeight();

	    if (this.options.fade === false) {
	      this.setCSS(this.getLeft(this.currentSlide));
	    } else {
	      this.setFade();
	    }

	    this.$slider.trigger("setPosition", [this]);
	  },
	  setProps: function setProps() {
	    var bodyStyle = document.body.style;

	    this.positionProp = this.options.vertical === true ? "top" : "left";

	    if (this.positionProp === "top") {
	      this.$slider.addClass("slick-vertical");
	    } else {
	      this.$slider.removeClass("slick-vertical");
	    }

	    if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
	      if (this.options.useCSS === true) {
	        this.cssTransitions = true;
	      }
	    }

	    if (this.options.fade) {
	      if (typeof this.options.zIndex === "number") {
	        if (this.options.zIndex < 3) {
	          this.options.zIndex = 3;
	        }
	      } else {
	        this.options.zIndex = this.defaults.zIndex;
	      }
	    }

	    if (bodyStyle.OTransform !== undefined) {
	      this.animType = "OTransform";
	      this.transformType = "-o-transform";
	      this.transitionType = "OTransition";
	      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) {
	        this.animType = false;
	      }
	    }
	    if (bodyStyle.MozTransform !== undefined) {
	      this.animType = "MozTransform";
	      this.transformType = "-moz-transform";
	      this.transitionType = "MozTransition";
	      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) {
	        this.animType = false;
	      }
	    }
	    if (bodyStyle.webkitTransform !== undefined) {
	      this.animType = "webkitTransform";
	      this.transformType = "-webkit-transform";
	      this.transitionType = "webkitTransition";
	      if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) {
	        this.animType = false;
	      }
	    }
	    if (bodyStyle.msTransform !== undefined) {
	      this.animType = "msTransform";
	      this.transformType = "-ms-transform";
	      this.transitionType = "msTransition";
	      if (bodyStyle.msTransform === undefined) {
	        this.animType = false;
	      }
	    }
	    if (bodyStyle.transform !== undefined && this.animType !== false) {
	      this.animType = "transform";
	      this.transformType = "transform";
	      this.transitionType = "transition";
	    }
	    this.transformsEnabled = this.options.useTransform && (this.animType !== null && this.animType !== false);
	  },
	  setSlideClasses: function setSlideClasses(index) {
	    var allSlides = this.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true");

	    this.$slides.eq(index).addClass("slick-current");

	    if (this.options.centerMode === true) {

	      var centerOffset = Math.floor(this.options.slidesToShow / 2);

	      if (this.options.infinite === true) {

	        if (index >= centerOffset && index <= this.slideCount - 1 - centerOffset) {

	          this.$slides.slice(index - centerOffset, index + centerOffset + 1).addClass("slick-active").attr("aria-hidden", "false");
	        } else {

	          var indexOffset = this.options.slidesToShow + index;
	          allSlides.slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2).addClass("slick-active").attr("aria-hidden", "false");
	        }

	        if (index === 0) {

	          allSlides.eq(allSlides.length - 1 - this.options.slidesToShow).addClass("slick-center");
	        } else if (index === this.slideCount - 1) {

	          allSlides.eq(this.options.slidesToShow).addClass("slick-center");
	        }
	      }

	      this.$slides.eq(index).addClass("slick-center");

	      return;
	    }

	    if (index >= 0 && index <= this.slideCount - this.options.slidesToShow) {

	      this.$slides.slice(index, index + this.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
	    } else if (allSlides.length <= this.options.slidesToShow) {

	      allSlides.addClass("slick-active").attr("aria-hidden", "false");
	    } else {

	      var remainder = this.slideCount % this.options.slidesToShow;
	      var indexOffset = this.options.infinite === true ? this.options.slidesToShow + index : index;

	      if (this.options.slidesToShow === this.options.slidesToScroll && this.slideCount - index < this.options.slidesToShow) {

	        allSlides.slice(indexOffset - (this.options.slidesToShow - remainder), indexOffset + remainder).addClass("slick-active").attr("aria-hidden", "false");
	      } else {

	        allSlides.slice(indexOffset, indexOffset + this.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
	      }
	    }

	    if (this.options.lazyLoad === "ondemand") {
	      this.lazyLoad();
	    }
	  },
	  setPaused: function setPaused(paused) {
	    if (this.options.autoplay === true && this.options.pauseOnHover === true) {
	      this.paused = paused;
	      if (!paused) {
	        this.autoPlay();
	      } else {
	        this.autoPlayClear();
	      }
	    }
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 18 */
/***/ function(module, exports) {

	
	/*eslint-disable max-statements, complexity, no-lonely-if */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var $ = window.$ || window.jQuery;

	exports["default"] = {
	  addSlide: function addSlide(markup, index, addBefore) {
	    if (typeof index === "boolean") {
	      addBefore = index;
	      index = null;
	    } else if (index < 0 || index >= this.slideCount) {
	      return false;
	    }

	    this.unload();

	    if (typeof index === "number") {
	      if (index === 0 && this.$slides.length === 0) {
	        $(markup).appendTo(this.$slideTrack);
	      } else if (addBefore) {
	        $(markup).insertBefore(this.$slides.eq(index));
	      } else {
	        $(markup).insertAfter(this.$slides.eq(index));
	      }
	    } else {
	      if (addBefore === true) {
	        $(markup).prependTo(this.$slideTrack);
	      } else {
	        $(markup).appendTo(this.$slideTrack);
	      }
	    }

	    this.$slides = this.$slideTrack.children(this.options.slide);

	    this.$slideTrack.children(this.options.slide).detach();

	    this.$slideTrack.append(this.$slides);

	    this.$slides.each(function (i, element) {
	      $(element).attr("data-slick-index", i);
	    });

	    this.$slidesCache = this.$slides;

	    this.reinit();
	  },
	  changeSlide: function changeSlide(event, dontAnimate) {
	    var $target = $(event.target);

	    // If target is a link, prevent default action.
	    if ($target.is("a")) {
	      event.preventDefault();
	    }

	    // If target is not the <li> element (ie: a child), find the <li>.
	    if (!$target.is("li")) {
	      $target = $target.closest("li");
	    }

	    var unevenOffset = this.slideCount % this.options.slidesToScroll !== 0;
	    var indexOffset = unevenOffset ? 0 : (this.slideCount - this.currentSlide) % this.options.slidesToScroll;
	    var slideOffset = null;

	    switch (event.data.message) {
	      case "previous":
	        slideOffset = indexOffset === 0 ? this.options.slidesToScroll : this.options.slidesToShow - indexOffset;
	        if (this.slideCount > this.options.slidesToShow) {
	          this.slideHandler(this.currentSlide - slideOffset, false, dontAnimate);
	        }
	        break;

	      case "next":
	        slideOffset = indexOffset === 0 ? this.options.slidesToScroll : indexOffset;
	        if (this.slideCount > this.options.slidesToShow) {
	          this.slideHandler(this.currentSlide + slideOffset, false, dontAnimate);
	        }
	        break;

	      case "index":
	        var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * this.options.slidesToScroll;

	        this.slideHandler(this.checkNavigable(index), false, dontAnimate);
	        $target.children().trigger("focus");
	        break;

	      default:
	        return;
	    }
	  },
	  removeSlide: function removeSlide(index, removeBefore, removeAll) {
	    if (typeof index === "boolean") {
	      removeBefore = index;
	      index = removeBefore === true ? 0 : this.slideCount - 1;
	    } else {
	      index = removeBefore === true ? --index : index;
	    }

	    if (this.slideCount < 1 || index < 0 || index > this.slideCount - 1) {
	      return false;
	    }

	    this.unload();

	    if (removeAll === true) {
	      this.$slideTrack.children().remove();
	    } else {
	      this.$slideTrack.children(this.options.slide).eq(index).remove();
	    }

	    this.$slides = this.$slideTrack.children(this.options.slide);

	    this.$slideTrack.children(this.options.slide).detach();

	    this.$slideTrack.append(this.$slides);

	    this.$slidesCache = this.$slides;

	    this.reinit();
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 19 */
/***/ function(module, exports) {

	
	/*eslint-disable max-statements, complexity, consistent-return */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  clickHandler: function clickHandler(event) {

	    if (this.shouldClick === false) {
	      event.stopImmediatePropagation();
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },
	  swipeDirection: function swipeDirection() {
	    var xDist = this.touchObject.startX - this.touchObject.curX;
	    var yDist = this.touchObject.startY - this.touchObject.curY;
	    var r = Math.atan2(yDist, xDist);

	    var swipeAngle = Math.round(r * 180 / Math.PI);
	    if (swipeAngle < 0) {
	      swipeAngle = 360 - Math.abs(swipeAngle);
	    }

	    if (swipeAngle <= 45 && swipeAngle >= 0) {
	      return this.options.rtl === false ? "left" : "right";
	    }
	    if (swipeAngle <= 360 && swipeAngle >= 315) {
	      return this.options.rtl === false ? "left" : "right";
	    }
	    if (swipeAngle >= 135 && swipeAngle <= 225) {
	      return this.options.rtl === false ? "right" : "left";
	    }
	    if (this.options.verticalSwiping === true) {
	      if (swipeAngle >= 35 && swipeAngle <= 135) {
	        return "left";
	      } else {
	        return "right";
	      }
	    }

	    return "vertical";
	  },
	  swipeEnd: function swipeEnd() {
	    this.dragging = false;

	    this.shouldClick = this.touchObject.swipeLength > 10 ? false : true;

	    if (this.touchObject.curX === undefined) {
	      return false;
	    }

	    if (this.touchObject.edgeHit === true) {
	      this.$slider.trigger("edge", [this, this.swipeDirection()]);
	    }

	    if (this.touchObject.swipeLength >= this.touchObject.minSwipe) {
	      var slideCount = 0;

	      switch (this.swipeDirection()) {
	        case "left":
	          slideCount = this.options.swipeToSlide ? this.checkNavigable(this.currentSlide + this.getSlideCount()) : this.currentSlide + this.getSlideCount();
	          this.slideHandler(slideCount);
	          this.currentDirection = 0;
	          this.touchObject = {};
	          this.$slider.trigger("swipe", [this, "left"]);
	          break;

	        case "right":
	          slideCount = this.options.swipeToSlide ? this.checkNavigable(this.currentSlide - this.getSlideCount()) : this.currentSlide - this.getSlideCount();
	          this.slideHandler(slideCount);
	          this.currentDirection = 1;
	          this.touchObject = {};
	          this.$slider.trigger("swipe", [this, "right"]);
	          break;
	      }
	    } else if (this.touchObject.startX !== this.touchObject.curX) {
	      this.slideHandler(this.currentSlide);
	      this.touchObject = {};
	    }
	  },
	  swipeHandler: function swipeHandler(event) {
	    if (this.options.swipe === false || "ontouchend" in document && this.options.swipe === false) {
	      return;
	    } else if (this.options.draggable === false && event.type.indexOf("mouse") !== -1) {
	      return;
	    }

	    this.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;

	    this.touchObject.minSwipe = this.listWidth / this.options.touchThreshold;

	    if (this.options.verticalSwiping === true) {
	      this.touchObject.minSwipe = this.listHeight / this.options.touchThreshold;
	    }

	    switch (event.data.action) {
	      case "start":
	        this.swipeStart(event);
	        break;

	      case "move":
	        this.swipeMove(event);
	        break;

	      case "end":
	        this.swipeEnd(event);
	        break;
	    }
	  },
	  swipeMove: function swipeMove(event) {
	    var touches = "touches" in event.originalEvent ? event.originalEvent.touches : null;

	    if (!this.dragging || touches && touches.length !== 1) {
	      return false;
	    }

	    var curLeft = this.getLeft(this.currentSlide);

	    this.touchObject.curX = touches !== null ? touches[0].pageX : event.clientX;
	    this.touchObject.curY = touches !== null ? touches[0].pageY : event.clientY;

	    this.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(this.touchObject.curX - this.touchObject.startX, 2)));

	    if (this.options.verticalSwiping === true) {
	      this.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(this.touchObject.curY - this.touchObject.startY, 2)));
	    }

	    var swipeDirection = this.swipeDirection();

	    if (swipeDirection === "vertical") {
	      return;
	    }

	    if (typeof event.originalEvent !== undefined && this.touchObject.swipeLength > 4) {
	      event.preventDefault();
	    }

	    var positionOffset = (this.options.rtl === false ? 1 : -1) * (this.touchObject.curX > this.touchObject.startX ? 1 : -1);
	    if (this.options.verticalSwiping === true) {
	      positionOffset = this.touchObject.curY > this.touchObject.startY ? 1 : -1;
	    }

	    var swipeLength = this.touchObject.swipeLength;

	    this.touchObject.edgeHit = false;

	    if (this.options.infinite === false) {
	      if (this.currentSlide === 0 && swipeDirection === "right" || this.currentSlide >= this.getDotCount() && swipeDirection === "left") {
	        swipeLength = this.touchObject.swipeLength * this.options.edgeFriction;
	        this.touchObject.edgeHit = true;
	      }
	    }

	    if (this.options.vertical === false) {
	      this.swipeLeft = curLeft + swipeLength * positionOffset;
	    } else {
	      this.swipeLeft = curLeft + swipeLength * (this.$list.height() / this.listWidth) * positionOffset;
	    }
	    if (this.options.verticalSwiping === true) {
	      this.swipeLeft = curLeft + swipeLength * positionOffset;
	    }

	    if (this.options.fade === true || this.options.touchMove === false) {
	      return false;
	    }

	    if (this.animating === true) {
	      this.swipeLeft = null;
	      return false;
	    }

	    this.setCSS(this.swipeLeft);
	  },
	  swipeStart: function swipeStart(event) {
	    var touches = "touches" in event.originalEvent ? event.originalEvent.touches : null;

	    if (this.touchObject.fingerCount !== 1 || this.slideCount <= this.options.slidesToShow) {
	      this.touchObject = {};
	      return false;
	    }

	    this.touchObject.startX = this.touchObject.curX = touches !== null ? touches.pageX : event.clientX;
	    this.touchObject.startY = this.touchObject.curY = touches !== null ? touches.pageY : event.clientY;

	    this.dragging = true;
	  }
	};
	module.exports = exports["default"];

/***/ }
/******/ ])
});
;